import java.util.Arrays;

class MergeSortedArrays {
    public static void main(String[] args) {
        MergeSortedArrays m = new MergeSortedArrays();
        int[] a = {1562206, 7848736, 10337121, 14588665, 23388710, 33778207, 35614361, 47637171, 52113585, 53814939, 66085213, 68425568, 72801225, 79307830, 79924100, 80159528, 88364887, 95008542, 98068355, 98921750, 100271681, 101835196, 102384454, 103910248, 110700566, 110740441, 113662471, 114217504, 115861103, 117185590, 119040811, 126877358, 127367478, 132398665, 141606244, 145926144, 152554617, 153684947, 154278160, 158902348, 160019598, 161210166, 167447187, 170452019, 179531112, 180714276, 180880614, 186404762, 190281508, 192630415, 192733680, 201545661, 203829879, 206536578, 206783155, 207601904, 210358520, 213456021, 214367549, 216997202, 218765605, 219182743, 222769295, 227706092, 1562206, 14462664, 26191515, 31278206, 63913120, 66085213, 70276315, 71909659, 72736665, 97305623, 100298725, 108023049, 110700566, 113662471, 122147152, 122832700, 125440950, 145718721, 154278160, 156826532, 170452019, 181247239, 197642676, 207601904, 218911296, 219182743, 230038099, 256058168, 275094093, 282045666, 299243251, 309419224, 314168222, 316002742, 317726191, 323310485, 324136396, 327817024, 346685826, 362092935, 362243088, 367864825, 383323629, 385356927, 386487545, 389036095, 397676691, 399657308, 442770741, 450741412, 451676807, 461281037, 507732812, 512134057, 518429700, 522941839, 532607248, 541815554, 555247488, 555911733, 565230655, 565277755, 577876815, 594123978};
        int[] b = {1562206, 14462664, 26191515, 31278206, 63913120, 66085213, 70276315, 71909659, 72736665, 97305623, 100298725, 108023049, 110700566, 113662471, 122147152, 122832700, 125440950, 145718721, 154278160, 156826532, 170452019, 181247239, 197642676, 207601904, 218911296, 219182743, 230038099, 256058168, 275094093, 282045666, 299243251, 309419224, 314168222, 316002742, 317726191, 323310485, 324136396, 327817024, 346685826, 362092935, 362243088, 367864825, 383323629, 385356927, 386487545, 389036095, 397676691, 399657308, 442770741, 450741412, 451676807, 461281037, 507732812, 512134057, 518429700, 522941839, 532607248, 541815554, 555247488, 555911733, 565230655, 565277755, 577876815, 594123978};
        m.merge(a, 64, b, 64);
        System.out.println(Arrays.toString(a));

    }
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // a is deep copy for the first part of nums1
        // we will directly overwrite nums1 now with
        // merged array 
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = nums1[i];
        }
        int[] b = nums2;

        // count is pointer in the merged array
        int count = 0;
        // pointers for a and b
        int i = 0;
        int j = 0;
        // index checking and also while we still
        // need more elements in the merged array
        while (i < m && j < n && count < m + n) {
            // equal case, add both and advance
            // both pointers
            if (a[i] == b[j]) {
                nums1[count++] = a[i++];
                nums1[count++] = b[j++];
            }
            // add the min and advance that pointer
            else if (a[i] < b[j]) {
                nums1[count++] = a[i++];
            }
            else { // (a[i] > b[j])
                nums1[count++] = b[j++];
            }
        }
        // if there are leftover ends,
        // we want to fill in the gaps
        // at the end of the merged array
        // with whatever remains (whichever
        // didn't reach the end first, i or j)
        while (count < m + n) {
            if (i == m) {
                // add remaining j's
                nums1[count++] = b[j++];
            }
            else {
                // add remaining i's
                nums1[count++] = a[i++];
            }
        }
        // array merged successfully
        return;
    }
}